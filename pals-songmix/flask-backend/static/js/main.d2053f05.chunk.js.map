{"version":3,"sources":["Login.tsx","AppComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","className","href","React","AppComponent","props","state","artist","tracks_state","tracks","loader","artist_list","suggested_artists","handleChange","bind","handleChangeAutocomplete","addArtist","removeArtist","event","fetched_suggested_artists","fetched_suggested_artists_data","artist_name_input","target","value","axios","get","data","this","setState","artist_name_autocomplete","textContent","concat","name","index","splice","fetched_related_artists","related_artists","fetched_tracks","track_collection","track_collection_dict","input_artist","related_artist","slice","playlist","payload","token","playlist_id","post","isAddDisabled","map","item","isGoDisabled","length","isDuplicatedArtist","Cookies","Autocomplete","freeSolo","options","getOptionLabel","option","onChange","renderInput","params","TextField","label","variant","fullWidth","disabled","onClick","createPlaylist","track_name","key","App","logged","undefined","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2053f05.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport class Login extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div> \r\n            <button className=\"button\">\r\n                <a href={`https://accounts.spotify.com/authorize?client_id=b9147e7fb3954d24a264480d4a63700d&redirect_uri=http://127.0.0.1:5000/successLoginDone&scope=playlist-modify-public playlist-modify-private playlist-read-private&response_type=code`}\r\n                >Login</a>\r\n            </button>\r\n        </div>\r\n    );\r\n  }\r\n}","import * as React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { TextField } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\ninterface ITracks {\r\n    tracks:ITrackDetails[]\r\n  }\r\n  \r\n  interface ITrackDetails {\r\n    track_name:string\r\n    track_id:string\r\n  }\r\n  \r\n  interface IArtist {\r\n    name:string\r\n  }\r\n  \r\n  interface IPayload {\r\n    tracks:ITracks\r\n    token:string\r\n    playlist:string\r\n  }\r\n  \r\n  interface IDispatchProps { \r\n  };\r\n  \r\n  interface IStateProps { \r\n    artist:string \r\n    tracks_state:ITracks\r\n    loader:boolean\r\n    artist_list:IArtist[]\r\n    suggested_artists:IArtist[]\r\n\r\n  };\r\n\r\nexport class AppComponent extends React.Component<IDispatchProps, IStateProps> {\r\n    constructor(props:IDispatchProps) {\r\n        super(props);\r\n        this.state = {artist:\"\", tracks_state: {tracks:[]},\r\n         loader:false, artist_list:[], suggested_artists:[]};\r\n    \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChangeAutocomplete = this.handleChangeAutocomplete.bind(this);\r\n        this.addArtist = this.addArtist.bind(this);\r\n        this.removeArtist = this.removeArtist.bind(this);\r\n      }\r\n\r\n    async handleChange(event:any) {\r\n        let fetched_suggested_artists:any = {suggested_artists:[]};\r\n        let fetched_suggested_artists_data:any[] = []\r\n        let artist_name_input:string = event.target.value\r\n      \r\n        fetched_suggested_artists = await axios.get('/suggestedArtists?name=' + artist_name_input); \r\n        fetched_suggested_artists_data = fetched_suggested_artists.data.suggested_artists\r\n    \r\n        this.setState({artist: artist_name_input});\r\n        this.setState({suggested_artists: fetched_suggested_artists_data});\r\n      }\r\n    \r\n      async handleChangeAutocomplete(event:any) {\r\n        let artist_name_autocomplete:string = event.target.textContent\r\n    \r\n        this.setState({artist: artist_name_autocomplete});\r\n      }\r\n    \r\n      addArtist(artist:string) {\r\n        let artist_list:IArtist[] = this.state.artist_list\r\n        artist_list = artist_list.concat({name:artist})  \r\n        this.setState({artist_list: artist_list})\r\n        this.setState({artist:\"\"})\r\n      }\r\n    \r\n      removeArtist(index:number) {\r\n        let artist_list:IArtist[] = this.state.artist_list\r\n        artist_list.splice(index,1)\r\n        this.setState({artist_list: artist_list})\r\n      }\r\n    \r\n      async createPlaylist() {\r\n      \r\n    \r\n        let fetched_related_artists:any = {related_artists:[]};\r\n        let fetched_tracks:any = {tracks:[]};\r\n        let track_collection:any = []\r\n        let track_collection_dict:any = {tracks:[]};\r\n    \r\n        this.setState({loader:true})  \r\n     \r\n        try {\r\n          for (let input_artist of this.state.artist_list) {\r\n            fetched_related_artists = await axios.get('/getSimilarArtists?name=' + input_artist.name);    \r\n    \r\n            let related_artists:IArtist[] = fetched_related_artists.data.related_artists\r\n    \r\n            for (let related_artist of related_artists) {\r\n              fetched_tracks = await axios.get('/getSongs?name=' + related_artist.name);\r\n              track_collection = track_collection.concat(fetched_tracks.data.tracks)  \r\n            }\r\n    \r\n            if (track_collection) {\r\n              track_collection_dict.tracks = track_collection.slice(0,5)\r\n            }\r\n          }\r\n        } catch (error) {}\r\n        \r\n          this.setState({tracks_state:track_collection_dict})  \r\n    \r\n          let playlist = await axios.get('/createPlaylist');\r\n    \r\n          const payload:IPayload = {tracks:this.state.tracks_state, \r\n            token:playlist.data.token, \r\n            playlist:playlist.data.playlist_id}\r\n    \r\n          let add_track = await axios.post('/addTrack', payload)\r\n    \r\n          this.setState({loader:false})  \r\n      }\r\n\r\n  render() {\r\n\r\n    let isAddDisabled:boolean = true\r\n    this.state.suggested_artists && this.state.suggested_artists.map((item) =>\r\n    {\r\n      if (item.name === this.state.artist && this.state.artist !== \"\"){\r\n        isAddDisabled = false\r\n    }})\r\n    let isGoDisabled:boolean = this.state.artist_list.length > 0 ? false : true\r\n    let isDuplicatedArtist:boolean = false\r\n    this.state.artist_list.map((item) =>\r\n    {\r\n      if (item.name === this.state.artist){\r\n        isDuplicatedArtist = true\r\n    }})\r\n\r\n    const logged = Cookies.get('spotify_code') === undefined ? false : true;\r\n    const playlistCreated = this.state.loader === false && this.state.tracks_state.tracks !== []\r\n\r\n    return (\r\n        <div>\r\n            {!this.state.loader ? <div className=\"columns layout\">   \r\n\r\n            <div className=\"column centered\">\r\n              <div className=\"box flex\">\r\n                <Autocomplete\r\n                freeSolo\r\n                options={this.state.suggested_artists}\r\n                getOptionLabel={option => option.name}\r\n                onChange={this.handleChangeAutocomplete}\r\n                \r\n                renderInput={params => (\r\n                  <TextField {...params} label=\"Artist Name\" variant=\"outlined\" fullWidth value={this.state.artist}\r\n                  onChange={this.handleChange} />\r\n                      )}\r\n                />\r\n                <div className=\"menuButtons\">\r\n                  <button className=\"button\" disabled={isAddDisabled || isDuplicatedArtist} \r\n                    onClick={() => this.addArtist(this.state.artist)}>Add</button>\r\n\r\n                  <button className=\"button\" disabled={isGoDisabled} onClick={() => this.createPlaylist()}>Create playlist</button>\r\n                </div>\r\n              </div>\r\n\r\n              {this.state.tracks_state.tracks && this.state.tracks_state.tracks.map((item) =>\r\n                (\r\n                  <p>{item.track_name}</p>\r\n                ))\r\n              }\r\n            </div>\r\n\r\n            <div className=\"column centered fixedSizeDiv\">\r\n              <div className=\"artistContainer\">\r\n                {this.state.artist_list.length === 0 && <div className=\"artistText\"> Insert artist </div>}\r\n                  {this.state.artist_list && this.state.artist_list.map((item, index) =>\r\n                    (\r\n                      <div className=\"box artistComponent\" key={index}>\r\n                        <div className=\"selectedArtist\">\r\n                          <p>{item.name}</p>\r\n                          <button className=\"button\" onClick={() => this.removeArtist(index)}>X</button>\r\n                          </div>\r\n                        </div>\r\n                    ))\r\n                  }\r\n              </div>\r\n            </div> \r\n          </div> : <p>Loading...</p>}</div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport 'bulma/css/bulma.css'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { TextField } from '@material-ui/core';\r\nimport { Login } from './Login';\r\nimport { AppComponent } from './AppComponent';\r\n//import { Button, InputProps } from \"react-bulma-components\";\r\n\r\ninterface ITracks {\r\n  tracks:ITrackDetails[]\r\n}\r\n\r\ninterface ITrackDetails {\r\n  track_name:string\r\n  track_id:string\r\n}\r\n\r\ninterface IArtist {\r\n  name:string\r\n}\r\n\r\ninterface IPayload {\r\n  tracks:ITracks\r\n  token:string\r\n  playlist:string\r\n}\r\n\r\ninterface IDispatchProps { \r\n};\r\n\r\ninterface IStateProps { \r\n  artist:string \r\n  tracks_state:ITracks\r\n  loader:boolean\r\n  artist_list:IArtist[]\r\n  suggested_artists:IArtist[]\r\n};\r\n\r\nexport default class App extends React.Component<IDispatchProps, IStateProps> {\r\n  constructor(props:IDispatchProps) {\r\n    super(props);\r\n    this.state = {artist:\"\", tracks_state: {tracks:[]},\r\n     loader:false, artist_list:[], suggested_artists:[]};\r\n\r\n    // this.handleChange = this.handleChange.bind(this);\r\n    // this.handleChangeAutocomplete = this.handleChangeAutocomplete.bind(this);\r\n    // this.addArtist = this.addArtist.bind(this);\r\n    // this.removeArtist = this.removeArtist.bind(this);\r\n  }\r\n\r\n  // async handleChange(event:any) {\r\n  //   let fetched_suggested_artists:any = {suggested_artists:[]};\r\n  //   let fetched_suggested_artists_data:any[] = []\r\n  //   let artist_name_input:string = event.target.value\r\n  \r\n  //   fetched_suggested_artists = await axios.get('/suggestedArtists?name=' + artist_name_input); \r\n  //   fetched_suggested_artists_data = fetched_suggested_artists.data.suggested_artists\r\n\r\n  //   this.setState({artist: artist_name_input});\r\n  //   this.setState({suggested_artists: fetched_suggested_artists_data});\r\n  // }\r\n\r\n  // async handleChangeAutocomplete(event:any) {\r\n  //   let artist_name_autocomplete:string = event.target.textContent\r\n\r\n  //   this.setState({artist: artist_name_autocomplete});\r\n  // }\r\n\r\n  // addArtist(artist:string) {\r\n  //   let artist_list:IArtist[] = this.state.artist_list\r\n  //   artist_list = artist_list.concat({name:artist})  \r\n  //   this.setState({artist_list: artist_list})\r\n  //   this.setState({artist:\"\"})\r\n  // }\r\n\r\n  // removeArtist(index:number) {\r\n  //   let artist_list:IArtist[] = this.state.artist_list\r\n  //   artist_list.splice(index,1)\r\n  //   this.setState({artist_list: artist_list})\r\n  // }\r\n\r\n  // async createPlaylist() {\r\n  \r\n\r\n  //   let fetched_related_artists:any = {related_artists:[]};\r\n  //   let fetched_tracks:any = {tracks:[]};\r\n  //   let track_collection:any = []\r\n  //   let track_collection_dict:any = {tracks:[]};\r\n\r\n  //   this.setState({loader:true})  \r\n \r\n  //   try {\r\n  //     for (let input_artist of this.state.artist_list) {\r\n  //       fetched_related_artists = await axios.get('/getSimilarArtists?name=' + input_artist.name);    \r\n\r\n  //       let related_artists:IArtist[] = fetched_related_artists.data.related_artists\r\n\r\n  //       for (let related_artist of related_artists) {\r\n  //         fetched_tracks = await axios.get('/getSongs?name=' + related_artist.name);\r\n  //         track_collection = track_collection.concat(fetched_tracks.data.tracks)  \r\n  //       }\r\n\r\n  //       if (track_collection) {\r\n  //         track_collection_dict.tracks = track_collection.slice(0,5)\r\n  //       }\r\n  //     }\r\n  //   } catch (error) {}\r\n    \r\n  //     this.setState({tracks_state:track_collection_dict})  \r\n\r\n  //     let playlist = await axios.get('/createPlaylist');\r\n\r\n  //     const payload:IPayload = {tracks:this.state.tracks_state, \r\n  //       token:playlist.data.token, \r\n  //       playlist:playlist.data.playlist_id}\r\n\r\n  //     let add_track = await axios.post('/addTrack', payload)\r\n\r\n  //     this.setState({loader:false})  \r\n  // }\r\n\r\n  render() {\r\n    let isAddDisabled:boolean = true\r\n    this.state.suggested_artists && this.state.suggested_artists.map((item) =>\r\n    {\r\n      if (item.name === this.state.artist && this.state.artist !== \"\"){\r\n        isAddDisabled = false\r\n    }})\r\n    let isGoDisabled:boolean = this.state.artist_list.length > 0 ? false : true\r\n    let isDuplicatedArtist:boolean = false\r\n    this.state.artist_list.map((item) =>\r\n    {\r\n      if (item.name === this.state.artist){\r\n        isDuplicatedArtist = true\r\n    }})\r\n\r\n    const logged = Cookies.get('spotify_code') === undefined ? false : true;\r\n    const playlistCreated = this.state.loader === false && this.state.tracks_state.tracks !== []\r\n    \r\n    return (\r\n      <div className=\"searchFields\">\r\n\r\n        {!logged ?    \r\n            <Login />\r\n            : \r\n            <AppComponent \r\n               />\r\n\r\n          // <div>\r\n          //   {!this.state.loader ? <div className=\"columns layout\">   \r\n\r\n          //   <div className=\"column centered\">\r\n          //     <div className=\"box flex\">\r\n          //       <Autocomplete\r\n          //       freeSolo\r\n          //       options={this.state.suggested_artists}\r\n          //       getOptionLabel={option => option.name}\r\n          //       onChange={this.handleChangeAutocomplete}\r\n                \r\n          //       renderInput={params => (\r\n          //         <TextField {...params} label=\"Artist Name\" variant=\"outlined\" fullWidth value={this.state.artist}\r\n          //         onChange={this.handleChange} />\r\n          //             )}\r\n          //       />\r\n          //       <div className=\"menuButtons\">\r\n          //         <button className=\"button\" disabled={isAddDisabled || isDuplicatedArtist} \r\n          //           onClick={() => this.addArtist(this.state.artist)}>Add</button>\r\n\r\n          //         <button className=\"button\" disabled={isGoDisabled} onClick={() => this.createPlaylist()}>Create playlist</button>\r\n          //       </div>\r\n          //     </div>\r\n\r\n          //     {this.state.tracks_state.tracks && this.state.tracks_state.tracks.map((item) =>\r\n          //       (\r\n          //         <p>{item.track_name}</p>\r\n          //       ))\r\n          //     }\r\n          //   </div>\r\n\r\n          //   <div className=\"column centered fixedSizeDiv\">\r\n          //     <div className=\"artistContainer\">\r\n          //       {this.state.artist_list.length === 0 && <div className=\"artistText\"> Insert artist </div>}\r\n          //         {this.state.artist_list && this.state.artist_list.map((item, index) =>\r\n          //           (\r\n          //             <div className=\"box artistComponent\" key={index}>\r\n          //               <div className=\"selectedArtist\">\r\n          //                 <p>{item.name}</p>\r\n          //                 <button className=\"button\" onClick={() => this.removeArtist(index)}>X</button>\r\n          //                 </div>\r\n          //               </div>\r\n          //           ))\r\n          //         }\r\n          //     </div>\r\n          //   </div> \r\n          // </div> : <p>Loading...</p>}</div>\r\n        }   \r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}