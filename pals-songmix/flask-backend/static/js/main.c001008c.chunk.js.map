{"version":3,"sources":["Login.tsx","AppComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","window","location","href","id","className","onClick","redirect","React","AppComponent","props","renderSuggestion","suggestion","name","onChange","event","setState","artist","target","value","onSuggestionsFetchRequested","getSuggestions","onSuggestionSelected","innerText","onChangePlaylist","playlistName","state","tracks_state","tracks","loader","artist_list","suggested_artists","addArtist","bind","removeArtist","this","concat","index","splice","fetched_suggested_artists","fetched_suggested_artists_data","axios","get","data","fetched_related_artists","related_artists","fetched_tracks","track_collection","track_collection_dict","input_artist","length","related_artists_filter_dup","reduce","unique","o","some","obj","push","related_artist","playlist","payload","playlist_id","post","isAddDisabled","map","item","isGoDisabled","isDuplicatedArtist","playlistCreated","disabledAdd","inputProps","placeholder","onKeyDown","key","suggestions","getSuggestionValue","option","disabled","createPlaylist","type","track_name","App","logged","undefined","Cookies","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c001008c.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './Login.css';\r\n\r\nexport class Login extends React.Component {\r\n  redirect() {\r\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=b9147e7fb3954d24a264480d4a63700d&redirect_uri=http://127.0.0.1:5000/successLoginDone&scope=playlist-modify-public playlist-modify-private playlist-read-private&response_type=code`\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div> \r\n          <div id=\"comeTop\">\r\n            <h1 className=\"title\">Songbinator</h1>\r\n            <h2 className=\"subtitle\">Problem finding a playlist that satisfies the musical taste of you and all your friends?\r\n              <br />Give us some artists and we will create you a personalised playlist that everyone will like!\r\n            </h2>\r\n          </div>\r\n          <div id=\"comeDown\">\r\n            <button className=\"button is-large is-success\" onClick={() => this.redirect()}>\r\n                Login\r\n            </button>\r\n            <br /><br />\r\n            <h2 className=\"subtitle\">Login with your Spotify account</h2>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}","import * as React from 'react';\r\nimport axios from 'axios';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport './AppComponent.css';\r\n\r\ninterface ITracks {\r\n    tracks:ITrackDetails[]\r\n  }\r\n  \r\n  interface ITrackDetails {\r\n    track_name:string\r\n    track_id:string\r\n  }\r\n  \r\n  interface IArtist {\r\n    name:string\r\n  }\r\n  \r\n  interface IPayload {\r\n    tracks:ITracks\r\n    playlist:string\r\n  }\r\n  \r\n  interface IDispatchProps { \r\n  };\r\n  \r\n  interface IStateProps { \r\n    artist:string \r\n    tracks_state:ITracks\r\n    loader:boolean\r\n    artist_list:IArtist[]\r\n\t\tsuggested_artists:IArtist[]\r\n\t\tplaylistName:string\r\n  };\r\n\r\nexport class AppComponent extends React.Component<IDispatchProps, IStateProps> {\r\n\tconstructor(props:IDispatchProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {artist:\"\", tracks_state: {tracks:[]},\r\n\t\t\tloader:false, artist_list:[], suggested_artists:[], playlistName:\"\"};\r\n\r\n\t\tthis.addArtist = this.addArtist.bind(this);\r\n\t\tthis.removeArtist = this.removeArtist.bind(this);\r\n\t}\r\n\t\r\n\taddArtist(artist:string) {\r\n\t\tlet artist_list:IArtist[] = this.state.artist_list\r\n\t\tartist_list = artist_list.concat({name:artist})  \r\n\t\tthis.setState({artist_list: artist_list})\r\n\t\tthis.setState({artist:\"\"})\r\n\t\tthis.setState({suggested_artists:[]})\r\n\t}\r\n\r\n\tremoveArtist(index:number) {\r\n\t\tlet artist_list:IArtist[] = this.state.artist_list\r\n\t\tartist_list.splice(index,1)\r\n\t\tthis.setState({artist_list: artist_list})\r\n\t}\r\n\r\n\trenderSuggestion = (suggestion:IArtist) => (\r\n\t\t<div>\r\n\t\t\t{suggestion.name}\r\n\t\t</div>\r\n\t);\r\n\r\n\tonChange = (event:any) => {\r\n\t\tthis.setState({\r\n\t\t\tartist: event.target.value\r\n\t\t});\r\n\t};\r\n\r\n\tasync getSuggestions(artist:any) {\r\n\t\tlet fetched_suggested_artists:any = {suggested_artists:[]};\r\n\t\tlet fetched_suggested_artists_data:any[] = []\r\n\t\r\n\t\tfetched_suggested_artists = await axios.get('/getSuggestedArtists?name=' + artist.value); \r\n\t\tfetched_suggested_artists_data = fetched_suggested_artists.data.suggested_artists\r\n\r\n\t\tthis.setState({suggested_artists: fetched_suggested_artists_data});\r\n\t}\r\n\r\n\tonSuggestionsFetchRequested = (value:any) => {\r\n\t\tthis.getSuggestions(value)\r\n\t};\r\n\r\n\tonSuggestionSelected = (value:any) => {\r\n\t\tthis.setState({\r\n\t\t\tartist: value.target.innerText\r\n\t\t});\r\n\t};\r\n\r\n\tonChangePlaylist = (event:any) => {\r\n    this.setState({playlistName: event.target.value});\r\n  }\r\n\r\n\r\n\r\n\tasync createPlaylist() {\r\n\t\tlet fetched_related_artists:any = {related_artists:[]};\r\n\t\tlet fetched_tracks:any = {tracks:[]};\r\n\t\tlet track_collection:any = []\r\n\t\tlet track_collection_dict:any = {tracks:[]};\r\n\t\tlet related_artists:IArtist[] = []\r\n\t\tthis.setState({loader:true})  \r\n\t\r\n\t\ttry {\r\n\t\t\tfor (let input_artist of this.state.artist_list) {\r\n\t\t\t\tfetched_related_artists = await axios.get('/getSimilarArtists?name=' + input_artist.name + \"&artists=\" + this.state.artist_list.length);    \r\n\t\t\t\trelated_artists = related_artists.concat(fetched_related_artists.data.related_artists)\r\n\t\t\t}\r\n\r\n\t\t\tlet related_artists_filter_dup = related_artists.reduce((unique:IArtist[], o:IArtist) => {\r\n\t\t\t\tif(!unique.some(obj => obj.name === o.name)) {\r\n\t\t\t\t\tunique.push(o);\r\n\t\t\t\t}\r\n\t\t\t\treturn unique;\r\n\t\t\t},[]);\r\n\r\n\t\t\tfor (let related_artist of related_artists_filter_dup) {\r\n\t\t\t\tfetched_tracks = await axios.get('/getTracks?name=' + related_artist.name);\r\n\t\t\t\ttrack_collection = track_collection.concat(fetched_tracks.data.tracks)  \r\n\t\t\t}\r\n\r\n\t\t\tif (track_collection) {\r\n\t\t\t\ttrack_collection_dict.tracks = track_collection\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState({tracks_state:track_collection_dict})  \r\n\r\n\t\t\tlet playlist = await axios.get('/createPlaylist?name=' + this.state.playlistName);\r\n\r\n\t\t\tconst payload:IPayload = {tracks:this.state.tracks_state, \r\n\t\t\t\tplaylist:playlist.data.playlist_id}\r\n\r\n\t\t\tawait axios.post('/addTracks', payload)\r\n\r\n\t\t\tthis.setState({loader:false})\r\n\r\n\t\t} catch (error) {}\r\n\r\n\t\t}\r\n\r\n\trender() {\r\n\t\tlet isAddDisabled:boolean = true\r\n\t\tthis.state.suggested_artists && this.state.suggested_artists.map((item) =>\r\n\t\t{\r\n\t\t\tif (item.name === this.state.artist && this.state.artist !== \"\"){\r\n\t\t\t\tisAddDisabled = false\r\n\t\t}})\r\n\t\tlet isGoDisabled:boolean = this.state.artist_list.length === 0 || this.state.playlistName === \"\";\r\n\t\tlet isDuplicatedArtist:boolean = false\r\n\t\tthis.state.artist_list.map((item) =>\r\n\t\t{\r\n\t\t\tif (item.name === this.state.artist){\r\n\t\t\t\tisDuplicatedArtist = true\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconst playlistCreated = this.state.loader === false && this.state.tracks_state.tracks.length !== 0;\r\n\t\tconst disabledAdd = isAddDisabled || isDuplicatedArtist || this.state.artist_list.length > 20;\r\n\r\n\t\tconst onKeyDown = (event:any) => {\r\n\t\t\tif (event.key === 'Enter' && !disabledAdd) {\r\n\t\t\t\tthis.addArtist(this.state.artist)\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst inputProps = {\r\n\t\t\tplaceholder: 'Type artist',\r\n\t\t\tvalue:this.state.artist,\r\n\t\t\tonChange: this.onChange,\r\n\t\t\tonKeyDown: onKeyDown\r\n\t\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{!this.state.loader ?\r\n\t\t\t\t<div> \r\n\t\t\t\t\t{!this.state.loader && !playlistCreated ?\r\n\t\t\t\t\t<div className=\"mainComponent\">   \r\n\t\t\t\t\t\t<div className=\"box mainBox\">\r\n\t\t\t\t\t\t\t<div className=\"inputBox\">\r\n\t\t\t\t\t\t\t\t<div className=\"menuInput\">\r\n\t\t\t\t\t\t\t\t\t<Autosuggest\r\n\t\t\t\t\t\t\t\t\t\tsuggestions={this.state.suggested_artists}\r\n\t\t\t\t\t\t\t\t\t\tonSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n\t\t\t\t\t\t\t\t\t\tgetSuggestionValue={option => option.name}\r\n\t\t\t\t\t\t\t\t\t\trenderSuggestion={this.renderSuggestion}\r\n\t\t\t\t\t\t\t\t\t\tonSuggestionSelected={this.onSuggestionSelected}\r\n\t\t\t\t\t\t\t\t\t\tinputProps={inputProps}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"menuButtons\">\r\n\t\t\t\t\t\t\t\t\t<button className=\"button\" disabled={disabledAdd} \r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.addArtist(this.state.artist)}>Add</button>\r\n\t\t\t\t\t\t\t\t\t<button className=\"button\" disabled={isGoDisabled} onClick={() => this.createPlaylist()}>Create playlist</button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<input className=\"input\" type=\"text\" onChange={this.onChangePlaylist} value={this.state.playlistName} placeholder=\"Playlist name\"></input>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t{this.state.tracks_state.tracks && this.state.tracks_state.tracks.map((item) =>\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t<p>{item.track_name}</p>\r\n\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t<div className=\"artistContainer\">\r\n\t\t\t\t\t\t\t\t{this.state.artist_list.length === 0 && <div className=\"artistText\"> Type artist </div>}\r\n\t\t\t\t\t\t\t\t{this.state.artist_list && this.state.artist_list.map((item, index) =>\r\n\t\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"box artistComponent\" id=\"boxEffect\" key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"selectedArtist\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>{item.name}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"button XButton\" onClick={() => this.removeArtist(index)}>X</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div> : <p className=\"artistText\">Playlist created!</p>}\r\n\t\t\t\t</div> : <p className=\"artistText\">Loading...</p>}\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}","import React from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport './App.css';\r\nimport 'bulma/css/bulma.css'\r\nimport { Login } from './Login';\r\nimport { AppComponent } from './AppComponent';\r\nimport GithubCorner from 'react-github-corner';\r\n\r\nexport default class App extends React.Component {\r\n\r\n  render() {\r\n    const logged = Cookies.get('spotify_code') === undefined ? false : true;\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        {!logged ?\r\n          <Login />\r\n          : \r\n          <AppComponent />\r\n        }   \r\n        <GithubCorner href=\"https://github.com/ignaciovi\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}