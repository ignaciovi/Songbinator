{"version":3,"sources":["Login.tsx","AppComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","window","location","href","className","onClick","redirect","React","AppComponent","props","state","artist","tracks_state","tracks","loader","artist_list","suggested_artists","handleChange","bind","handleChangeAutocomplete","addArtist","removeArtist","event","fetched_suggested_artists","fetched_suggested_artists_data","artist_name_input","target","value","axios","get","data","this","setState","artist_name_autocomplete","textContent","concat","name","index","splice","fetched_related_artists","related_artists","fetched_tracks","track_collection","track_collection_dict","input_artist","length","console","log","related_artists_filter_dup","reduce","unique","o","some","obj","push","related_artist","playlist","payload","token","playlist_id","post","isAddDisabled","map","item","isGoDisabled","isDuplicatedArtist","playlistCreated","Autocomplete","freeSolo","options","getOptionLabel","option","onChange","renderInput","params","TextField","label","variant","fullWidth","disabled","createPlaylist","track_name","key","App","logged","undefined","Cookies","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAEaA,G,YAAb,mLAEIC,OAAOC,SAASC,KAAhB,wOAFJ,+BAMY,IAAD,OACP,OACI,2BACI,0BAAQC,UAAU,SAASC,QAAS,kBAAM,EAAKC,aAA/C,cATZ,GAA2BC,c,oECkCdC,G,MAAb,YACC,WAAYC,GAAuB,IAAD,8BACjC,4CAAMA,KACDC,MAAQ,CAACC,OAAO,GAAIC,aAAc,CAACC,OAAO,IAC9CC,QAAO,EAAOC,YAAY,GAAIC,kBAAkB,IAEjD,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,yBAA2B,EAAKA,yBAAyBD,KAA9B,gBAChC,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBARa,EADnC,mHAYoBI,GAZpB,kFAaMC,EAAgC,CAACP,kBAAkB,IACnDQ,EAAuC,GACvCC,EAA2BH,EAAMI,OAAOC,MAf9C,SAiBoCC,IAAMC,IAAI,6BAA+BJ,GAjB7E,OAiBEF,EAjBF,OAkBEC,EAAiCD,EAA0BO,KAAKd,kBAEhEe,KAAKC,SAAS,CAACrB,OAAQc,IACvBM,KAAKC,SAAS,CAAChB,kBAAmBQ,IArBpC,+LAwBgCF,GAxBhC,uEAyBMW,EAAkCX,EAAMI,OAAOQ,YACnDH,KAAKC,SAAS,CAACrB,OAAQsB,IA1BzB,uIA6BWtB,GACT,IAAII,EAAwBgB,KAAKrB,MAAMK,YACvCA,EAAcA,EAAYoB,OAAO,CAACC,KAAKzB,IACvCoB,KAAKC,SAAS,CAACjB,YAAaA,IAC5BgB,KAAKC,SAAS,CAACrB,OAAO,OAjCxB,mCAoCc0B,GACZ,IAAItB,EAAwBgB,KAAKrB,MAAMK,YACvCA,EAAYuB,OAAOD,EAAM,GACzBN,KAAKC,SAAS,CAACjB,YAAaA,MAvC9B,6LA2CMwB,EAA8B,CAACC,gBAAgB,IAC/CC,EAAqB,CAAC5B,OAAO,IAC7B6B,EAAuB,GACvBC,EAA4B,CAAC9B,OAAO,IACpC2B,EAA4B,GAChCT,KAAKC,SAAS,CAAClB,QAAO,IAhDxB,wCAmD4BiB,KAAKrB,MAAMK,YAnDvC,0EAmDY6B,EAnDZ,kBAoDoChB,IAAMC,IAAI,2BAA6Be,EAAaR,KAAO,YAAcL,KAAKrB,MAAMK,YAAY8B,QApDpI,QAoDIN,EApDJ,OAqDIC,EAAkBA,EAAgBL,OAAOI,EAAwBT,KAAKU,iBACtEM,QAAQC,IAAI,eACZD,QAAQC,IAAIP,GAvDhB,+QA0DOQ,EAA6BR,EAAgBS,QAAO,SAACC,EAAkBC,GAI1E,OAHID,EAAOE,MAAK,SAAAC,GAAG,OAAIA,EAAIjB,OAASe,EAAEf,SACrCc,EAAOI,KAAKH,GAEND,IACN,IAEFJ,QAAQC,IAAI,6CACZD,QAAQC,IAAIC,GAlEf,+BAqE8BA,EArE9B,0EAqEYO,EArEZ,kBAsE2B3B,IAAMC,IAAI,mBAAqB0B,EAAenB,MAtEzE,QAsEIK,EAtEJ,OAuEIC,EAAmBA,EAAiBP,OAAOM,EAAeX,KAAKjB,QAvEnE,sRA0EO6B,IACHC,EAAsB9B,OAAS6B,GAGhCI,QAAQC,IAAI,qCACZD,QAAQC,IAAIL,GAEZX,KAAKC,SAAS,CAACpB,aAAa+B,IAjF/B,UAmFwBf,IAAMC,IAAI,mBAnFlC,eAmFO2B,EAnFP,OAqFSC,EAAmB,CAAC5C,OAAOkB,KAAKrB,MAAME,aAC3C8C,MAAMF,EAAS1B,KAAK4B,MACpBF,SAASA,EAAS1B,KAAK6B,aAvF3B,UAyFS/B,IAAMgC,KAAK,aAAcH,GAzFlC,QA2FG1B,KAAKC,SAAS,CAAClB,QAAO,IA3FzB,qPAiGW,IAAD,OACJ+C,GAAwB,EAC5B9B,KAAKrB,MAAMM,mBAAqBe,KAAKrB,MAAMM,kBAAkB8C,KAAI,SAACC,GAE7DA,EAAK3B,OAAS,EAAK1B,MAAMC,QAAgC,KAAtB,EAAKD,MAAMC,SACjDkD,GAAgB,MAElB,IAAIG,IAAuBjC,KAAKrB,MAAMK,YAAY8B,OAAS,GACvDoB,GAA6B,EACjClC,KAAKrB,MAAMK,YAAY+C,KAAI,SAACC,GAEvBA,EAAK3B,OAAS,EAAK1B,MAAMC,SAC5BsD,GAAqB,MAIvB,IAAMC,GAAwC,IAAtBnC,KAAKrB,MAAMI,QAA8D,IAA1CiB,KAAKrB,MAAME,aAAaC,OAAOgC,OAEtF,OACC,2BACGd,KAAKrB,MAAMI,OA2CJ,uCA1CT,2BACGiB,KAAKrB,MAAMI,QAAWoD,EAwCf,8CAvCT,uBAAK9D,UAAU,iBACd,uBAAKA,UAAU,gBACd,gBAAC+D,EAAA,EAAD,CACAC,UAAQ,EACRC,QAAStC,KAAKrB,MAAMM,kBACpBsD,eAAgB,SAAAC,GAAM,OAAIA,EAAOnC,MACjCoC,SAAUzC,KAAKZ,yBACfsD,YAAa,SAAAC,GAAM,OACnB,gBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBE,MAAM,cAAcC,QAAQ,WAAWC,WAAS,EAACnD,MAAO,EAAKjB,MAAMC,OAC1F6D,SAAU,EAAKvD,mBAGf,uBAAKb,UAAU,eACd,0BAAQA,UAAU,SAAS2E,SAAUlB,GAAiBI,EACpD5D,QAAS,kBAAM,EAAKe,UAAU,EAAKV,MAAMC,UAD3C,OAEA,0BAAQP,UAAU,SAAS2E,SAAUf,EAAc3D,QAAS,kBAAM,EAAK2E,mBAAvE,qBAIDjD,KAAKrB,MAAME,aAAaC,QAAUkB,KAAKrB,MAAME,aAAaC,OAAOiD,KAAI,SAACC,GAAD,OAEpE,yBAAIA,EAAKkB,eAIX,uBAAK7E,UAAU,mBACsB,IAAlC2B,KAAKrB,MAAMK,YAAY8B,QAAgB,uBAAKzC,UAAU,cAAf,mBACvC2B,KAAKrB,MAAMK,aAAegB,KAAKrB,MAAMK,YAAY+C,KAAI,SAACC,EAAM1B,GAAP,OAEpD,uBAAKjC,UAAU,sBAAsB8E,IAAK7C,GACxC,uBAAKjC,UAAU,kBACf,yBAAI2D,EAAK3B,MACT,0BAAQhC,UAAU,iBAAiBC,QAAS,kBAAM,EAAKgB,aAAagB,KAApE,kBAxJZ,GAAkC9B,cC7Bb4E,E,iLAGjB,IAAMC,OAAyCC,IAAhCC,IAAQzD,IAAI,gBAE3B,OACE,yBAAKzB,UAAU,OACXgF,EAGA,kBAAC,EAAD,MAFA,kBAAC,EAAD,W,GARuB7E,IAAMgF,WCKnBC,QACW,cAA7BvF,OAAOC,SAASuF,UAEe,UAA7BxF,OAAOC,SAASuF,UAEhBxF,OAAOC,SAASuF,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9dfad158.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport class Login extends React.Component {\r\n  redirect() {\r\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=b9147e7fb3954d24a264480d4a63700d&redirect_uri=http://127.0.0.1:5000/successLoginDone&scope=playlist-modify-public playlist-modify-private playlist-read-private&response_type=code`\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div> \r\n            <button className=\"button\" onClick={() => this.redirect()}>\r\n                Login\r\n            </button>\r\n        </div>\r\n    );\r\n  }\r\n}","import * as React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { TextField } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport './AppComponent.css';\r\n\r\ninterface ITracks {\r\n    tracks:ITrackDetails[]\r\n  }\r\n  \r\n  interface ITrackDetails {\r\n    track_name:string\r\n    track_id:string\r\n  }\r\n  \r\n  interface IArtist {\r\n    name:string\r\n  }\r\n  \r\n  interface IPayload {\r\n    tracks:ITracks\r\n    token:string\r\n    playlist:string\r\n  }\r\n  \r\n  interface IDispatchProps { \r\n  };\r\n  \r\n  interface IStateProps { \r\n    artist:string \r\n    tracks_state:ITracks\r\n    loader:boolean\r\n    artist_list:IArtist[]\r\n\t\tsuggested_artists:IArtist[]\r\n  };\r\n\r\nexport class AppComponent extends React.Component<IDispatchProps, IStateProps> {\r\n\tconstructor(props:IDispatchProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {artist:\"\", tracks_state: {tracks:[]},\r\n\t\t\tloader:false, artist_list:[], suggested_artists:[]};\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleChangeAutocomplete = this.handleChangeAutocomplete.bind(this);\r\n\t\tthis.addArtist = this.addArtist.bind(this);\r\n\t\tthis.removeArtist = this.removeArtist.bind(this);\r\n\t}\r\n\r\n\tasync handleChange(event:any) {\r\n\t\tlet fetched_suggested_artists:any = {suggested_artists:[]};\r\n\t\tlet fetched_suggested_artists_data:any[] = []\r\n\t\tlet artist_name_input:string = event.target.value\r\n\t\r\n\t\tfetched_suggested_artists = await axios.get('/getSuggestedArtists?name=' + artist_name_input); \r\n\t\tfetched_suggested_artists_data = fetched_suggested_artists.data.suggested_artists\r\n\r\n\t\tthis.setState({artist: artist_name_input});\r\n\t\tthis.setState({suggested_artists: fetched_suggested_artists_data});\r\n\t}\r\n\t\r\n\tasync handleChangeAutocomplete(event:any) {\r\n\t\tlet artist_name_autocomplete:string = event.target.textContent\r\n\t\tthis.setState({artist: artist_name_autocomplete});\r\n\t}\r\n\t\r\n\taddArtist(artist:string) {\r\n\t\tlet artist_list:IArtist[] = this.state.artist_list\r\n\t\tartist_list = artist_list.concat({name:artist})  \r\n\t\tthis.setState({artist_list: artist_list})\r\n\t\tthis.setState({artist:\"\"})\r\n\t}\r\n\r\n\tremoveArtist(index:number) {\r\n\t\tlet artist_list:IArtist[] = this.state.artist_list\r\n\t\tartist_list.splice(index,1)\r\n\t\tthis.setState({artist_list: artist_list})\r\n\t}\r\n\t\r\n\tasync createPlaylist() {\r\n\t\tlet fetched_related_artists:any = {related_artists:[]};\r\n\t\tlet fetched_tracks:any = {tracks:[]};\r\n\t\tlet track_collection:any = []\r\n\t\tlet track_collection_dict:any = {tracks:[]};\r\n\t\tlet related_artists:IArtist[] = []\r\n\t\tthis.setState({loader:true})  \r\n\t\r\n\t\ttry {\r\n\t\t\tfor (let input_artist of this.state.artist_list) {\r\n\t\t\t\tfetched_related_artists = await axios.get('/getSimilarArtists?name=' + input_artist.name + \"&artists=\" + this.state.artist_list.length);    \r\n\t\t\t\trelated_artists = related_artists.concat(fetched_related_artists.data.related_artists)\r\n\t\t\t\tconsole.log(\"ARTIIIIIIST\")\r\n\t\t\t\tconsole.log(related_artists)\r\n\t\t\t}\r\n\r\n\t\t\tlet related_artists_filter_dup = related_artists.reduce((unique:IArtist[], o:IArtist) => {\r\n\t\t\t\tif(!unique.some(obj => obj.name === o.name)) {\r\n\t\t\t\t\tunique.push(o);\r\n\t\t\t\t}\r\n\t\t\t\treturn unique;\r\n\t\t\t},[]);\r\n\r\n\t\t\tconsole.log(\"ALLLLLLLLLLLLLLLLLL OF THEEEEEEEEEEEEEEEM\")\r\n\t\t\tconsole.log(related_artists_filter_dup)\r\n\r\n\r\n\t\t\tfor (let related_artist of related_artists_filter_dup) {\r\n\t\t\t\tfetched_tracks = await axios.get('/getTracks?name=' + related_artist.name);\r\n\t\t\t\ttrack_collection = track_collection.concat(fetched_tracks.data.tracks)  \r\n\t\t\t}\r\n\r\n\t\t\tif (track_collection) {\r\n\t\t\t\ttrack_collection_dict.tracks = track_collection\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\"YEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\")\r\n\t\t\tconsole.log(track_collection)\r\n\t\t\r\n\t\t\tthis.setState({tracks_state:track_collection_dict})  \r\n\r\n\t\t\tlet playlist = await axios.get('/createPlaylist');\r\n\r\n\t\t\tconst payload:IPayload = {tracks:this.state.tracks_state, \r\n\t\t\t\ttoken:playlist.data.token, \r\n\t\t\t\tplaylist:playlist.data.playlist_id}\r\n\r\n\t\t\tawait axios.post('/addTracks', payload)\r\n\r\n\t\t\tthis.setState({loader:false})\r\n\r\n\t\t} catch (error) {}\r\n\r\n\t\t}\r\n\r\n\trender() {\r\n\t\tlet isAddDisabled:boolean = true\r\n\t\tthis.state.suggested_artists && this.state.suggested_artists.map((item) =>\r\n\t\t{\r\n\t\t\tif (item.name === this.state.artist && this.state.artist !== \"\"){\r\n\t\t\t\tisAddDisabled = false\r\n\t\t}})\r\n\t\tlet isGoDisabled:boolean = this.state.artist_list.length > 0 ? false : true\r\n\t\tlet isDuplicatedArtist:boolean = false\r\n\t\tthis.state.artist_list.map((item) =>\r\n\t\t{\r\n\t\t\tif (item.name === this.state.artist){\r\n\t\t\t\tisDuplicatedArtist = true\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconst playlistCreated = this.state.loader === false && this.state.tracks_state.tracks.length !== 0\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{!this.state.loader ?\r\n\t\t\t\t<div> \r\n\t\t\t\t\t{!this.state.loader && !playlistCreated ?\r\n\t\t\t\t\t<div className=\"mainComponent\">   \r\n\t\t\t\t\t\t<div className=\"box inputBox\">\r\n\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\tfreeSolo\r\n\t\t\t\t\t\t\toptions={this.state.suggested_artists}\r\n\t\t\t\t\t\t\tgetOptionLabel={option => option.name}\r\n\t\t\t\t\t\t\tonChange={this.handleChangeAutocomplete}\r\n\t\t\t\t\t\t\trenderInput={params => (\r\n\t\t\t\t\t\t\t<TextField {...params} label=\"Artist Name\" variant=\"outlined\" fullWidth value={this.state.artist}\r\n\t\t\t\t\t\t\tonChange={this.handleChange} />\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<div className=\"menuButtons\">\r\n\t\t\t\t\t\t\t\t<button className=\"button\" disabled={isAddDisabled || isDuplicatedArtist} \r\n\t\t\t\t\t\t\t\t\t\tonClick={() => this.addArtist(this.state.artist)}>Add</button>\r\n\t\t\t\t\t\t\t\t<button className=\"button\" disabled={isGoDisabled} onClick={() => this.createPlaylist()}>Create playlist</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t{this.state.tracks_state.tracks && this.state.tracks_state.tracks.map((item) =>\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t<p>{item.track_name}</p>\r\n\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t<div className=\"artistContainer\">\r\n\t\t\t\t\t\t\t\t{this.state.artist_list.length === 0 && <div className=\"artistText\"> Insert artist </div>}\r\n\t\t\t\t\t\t\t\t{this.state.artist_list && this.state.artist_list.map((item, index) =>\r\n\t\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"box artistComponent\" key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"selectedArtist\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p>{item.name}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"button XButton\" onClick={() => this.removeArtist(index)}>X</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div> : <p>Playlist created!</p>}\r\n\t\t\t\t</div> : <p>Loading...</p>}\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}","import React from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport './App.css';\r\nimport 'bulma/css/bulma.css'\r\nimport { Login } from './Login';\r\nimport { AppComponent } from './AppComponent';\r\n\r\nexport default class App extends React.Component {\r\n\r\n  render() {\r\n    const logged = Cookies.get('spotify_code') === undefined ? false : true;\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        {!logged ?\r\n          <Login />\r\n          : \r\n          <AppComponent />\r\n        }   \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}